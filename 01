<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>English Learning Adventure</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            color: white;
            margin-bottom: 30px;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .user-info {
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: white;
        }

        .user-stats {
            display: flex;
            gap: 30px;
        }

        .stat {
            text-align: center;
        }

        .stat-value {
            font-size: 1.8rem;
            font-weight: bold;
            display: block;
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.8;
        }

        .levels-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .level-card {
            background: white;
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .level-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0,0,0,0.2);
        }

        .level-card.locked {
            opacity: 0.6;
            background: #f5f5f5;
            cursor: not-allowed;
        }

        .level-card.completed {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
        }

        .level-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .level-number {
            background: #667eea;
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }

        .level-card.completed .level-number {
            background: #2e7d32;
        }

        .level-card.locked .level-number {
            background: #ccc;
        }

        .level-status {
            font-size: 0.9rem;
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: bold;
        }

        .status-unlocked {
            background: #e3f2fd;
            color: #1976d2;
        }

        .status-completed {
            background: rgba(255,255,255,0.2);
            color: white;
        }

        .status-locked {
            background: #f5f5f5;
            color: #999;
        }

        .level-title {
            font-size: 1.3rem;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .level-description {
            color: #666;
            margin-bottom: 15px;
            line-height: 1.5;
        }

        .level-card.completed .level-description {
            color: rgba(255,255,255,0.9);
        }

        .level-progress {
            margin-bottom: 15px;
        }

        .progress-bar {
            background: #e0e0e0;
            height: 8px;
            border-radius: 4px;
            overflow: hidden;
        }

        .progress-fill {
            background: #667eea;
            height: 100%;
            border-radius: 4px;
            transition: width 0.3s ease;
        }

        .level-card.completed .progress-fill {
            background: #2e7d32;
        }

        .level-actions {
            display: flex;
            gap: 10px;
        }

        .btn {
            padding: 12px 20px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
            flex: 1;
            text-align: center;
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-primary:hover {
            background: #5a67d8;
            transform: translateY(-2px);
        }

        .btn-success {
            background: #4CAF50;
            color: white;
        }

        .btn-disabled {
            background: #ccc;
            color: #999;
            cursor: not-allowed;
        }

        .achievements {
            background: white;
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .achievements h3 {
            margin-bottom: 20px;
            color: #333;
        }

        .achievement-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
        }

        .achievement {
            text-align: center;
            padding: 15px;
            border-radius: 15px;
            background: #f8f9fa;
            transition: all 0.3s ease;
        }

        .achievement.earned {
            background: linear-gradient(135deg, #ffd700, #ffed4e);
            transform: scale(1.05);
        }

        .achievement-icon {
            font-size: 2rem;
            margin-bottom: 8px;
        }

        .achievement-name {
            font-size: 0.9rem;
            font-weight: bold;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .modal.show {
            display: flex;
        }

        .modal-content {
            background: white;
            border-radius: 20px;
            padding: 30px;
            max-width: 500px;
            width: 90%;
            text-align: center;
        }

        .close-modal {
            background: #667eea;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 10px;
            cursor: pointer;
            margin-top: 20px;
        }

        @media (max-width: 768px) {
            .user-info {
                flex-direction: column;
                gap: 15px;
            }

            .user-stats {
                gap: 20px;
            }

            .levels-grid {
                grid-template-columns: 1fr;
            }

            .header h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üéì English Learning Adventure</h1>
            <p>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏°‡πÅ‡∏ö‡∏ö‡∏î‡πà‡∏≤‡∏ô</p>
        </div>

        <div class="user-info">
            <div>
                <h3>üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô!</h3>
                <p>‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡πÇ‡∏•‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á?</p>
            </div>
            <div class="user-stats">
                <div class="stat">
                    <span class="stat-value" id="totalScore">0</span>
                    <span class="stat-label">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°</span>
                </div>
                <div class="stat">
                    <span class="stat-value" id="completedLevels">0</span>
                    <span class="stat-label">‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô</span>
                </div>
                <div class="stat">
                    <span class="stat-value" id="currentStreak">0</span>
                    <span class="stat-label">‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á</span>
                </div>
            </div>
        </div>

        <div class="levels-grid" id="levelsGrid">
            <!-- Levels will be generated by JavaScript -->
        </div>

        <div class="achievements">
            <h3>üèÜ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</h3>
            <div class="achievement-grid" id="achievementGrid">
                <!-- Achievements will be generated by JavaScript -->
            </div>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal" id="gameModal">
        <div class="modal-content">
            <h3 id="modalTitle">‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©</h3>
            <p id="modalDescription">‡πÉ‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏ô‡∏µ‡πâ ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô</p>
            <div style="margin: 20px 0;">
                <p><strong>üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢:</strong> ‡∏ó‡∏≥‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏î‡πâ 80% ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ</p>
                <p><strong>‚≠ê ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•:</strong> 100 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</p>
            </div>
            <button class="btn btn-primary" onclick="startLevel()">‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô</button>
            <button class="close-modal" onclick="closeModal()">‡∏õ‡∏¥‡∏î</button>
        </div>
    </div>

    <script>
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
        let gameData = {
            currentLevel: 1,
            totalScore: 0,
            completedLevels: 0,
            currentStreak: 5,
            userProgress: {}
        };

        // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡πà‡∏≤‡∏ô
        const levels = [
            {
                id: 1,
                title: "‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©",
                description: "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô Hello, Hi, Good morning",
                geniallyUrl: "https://view.genial.ly/your-greeting-game",
                requiredScore: 80,
                reward: 100,
                unlocked: true
            },
            {
                id: 2,
                title: "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á",
                description: "My name is, I am from, I like...",
                geniallyUrl: "https://view.genial.ly/your-introduction-game",
                requiredScore: 80,
                reward: 150,
                unlocked: false
            },
            {
                id: 3,
                title: "‡∏™‡∏µ‡∏™‡∏±‡∏ô‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©",
                description: "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏™‡∏µ Red, Blue, Green, Yellow",
                geniallyUrl: "https://view.genial.ly/your-colors-game",
                requiredScore: 80,
                reward: 120,
                unlocked: false
            },
            {
                id: 4,
                title: "‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö",
                description: "Numbers 1-20 ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô",
                geniallyUrl: "https://view.genial.ly/your-numbers-game",
                requiredScore: 80,
                reward: 180,
                unlocked: false
            },
            {
                id: 5,
                title: "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô",
                description: "Family members: Father, Mother, Sister, Brother",
                geniallyUrl: "https://view.genial.ly/your-family-game",
                requiredScore: 80,
                reward: 200,
                unlocked: false
            },
            {
                id: 6,
                title: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°",
                description: "Food & Drinks vocabulary ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
                geniallyUrl: "https://view.genial.ly/your-food-game",
                requiredScore: 80,
                reward: 250,
                unlocked: false
            }
        ];

        // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        const achievements = [
            {
                id: 'first_level',
                name: '‡∏Å‡πâ‡∏≤‡∏ß‡πÅ‡∏£‡∏Å',
                icon: 'üéØ',
                description: '‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πà‡∏≤‡∏ô‡πÅ‡∏£‡∏Å',
                earned: false
            },
            {
                id: 'perfectionist',
                name: '‡∏ô‡∏±‡∏Å‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö',
                icon: 'üíØ',
                description: '‡∏ó‡∏≥‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ï‡πá‡∏° 100%',
                earned: false
            },
            {
                id: 'streak_master',
                name: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠',
                icon: 'üî•',
                description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á 7 ‡∏ß‡∏±‡∏ô',
                earned: true
            },
            {
                id: 'level_crusher',
                name: '‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢',
                icon: '‚ö°',
                description: '‡∏ú‡πà‡∏≤‡∏ô 5 ‡∏î‡πà‡∏≤‡∏ô',
                earned: false
            }
        ];

        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage (‡∏à‡∏≥‡∏•‡∏≠‡∏á database)
        function loadGameData() {
            const saved = localStorage.getItem('englishGameData');
            if (saved) {
                gameData = JSON.parse(saved);
            }
            updateUI();
        }

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        function saveGameData() {
            localStorage.setItem('englishGameData', JSON.stringify(gameData));
        }

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï UI
        function updateUI() {
            document.getElementById('totalScore').textContent = gameData.totalScore;
            document.getElementById('completedLevels').textContent = gameData.completedLevels;
            document.getElementById('currentStreak').textContent = gameData.currentStreak;
            
            renderLevels();
            renderAchievements();
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        function renderLevels() {
            const grid = document.getElementById('levelsGrid');
            grid.innerHTML = '';

            levels.forEach(level => {
                const isCompleted = gameData.userProgress[level.id]?.completed || false;
                const isUnlocked = level.unlocked || isCompleted || (level.id > 1 && gameData.userProgress[level.id - 1]?.completed);
                const userScore = gameData.userProgress[level.id]?.score || 0;
                
                let statusClass = 'locked';
                let statusText = 'üîí ‡∏•‡πá‡∏≠‡∏Ñ';
                let buttonText = '‡∏•‡πá‡∏≠‡∏Ñ';
                let buttonClass = 'btn-disabled';
                
                if (isCompleted) {
                    statusClass = 'completed';
                    statusText = '‚úÖ ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß';
                    buttonText = '‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
                    buttonClass = 'btn-success';
                } else if (isUnlocked) {
                    statusClass = 'unlocked';
                    statusText = 'üéÆ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏•‡πà‡∏ô';
                    buttonText = '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô';
                    buttonClass = 'btn-primary';
                }

                const progressPercent = isCompleted ? 100 : (userScore / level.requiredScore * 100);

                const levelCard = `
                    <div class="level-card ${statusClass}">
                        <div class="level-header">
                            <div class="level-number">${level.id}</div>
                            <div class="level-status status-${statusClass}">${statusText}</div>
                        </div>
                        <h3 class="level-title">${level.title}</h3>
                        <p class="level-description">${level.description}</p>
                        <div class="level-progress">
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: ${progressPercent}%"></div>
                            </div>
                            <small>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤: ${Math.round(progressPercent)}%</small>
                        </div>
                        <div class="level-actions">
                            <button class="btn ${buttonClass}" 
                                    onclick="openLevel(${level.id})" 
                                    ${!isUnlocked ? 'disabled' : ''}>
                                ${buttonText}
                            </button>
                        </div>
                        ${isCompleted ? `<div style="margin-top: 10px;"><small>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: ${userScore}/${level.requiredScore}</small></div>` : ''}
                    </div>
                `;
                
                grid.innerHTML += levelCard;
            });
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        function renderAchievements() {
            const grid = document.getElementById('achievementGrid');
            grid.innerHTML = '';

            achievements.forEach(achievement => {
                const earnedClass = achievement.earned ? 'earned' : '';
                const achievementDiv = `
                    <div class="achievement ${earnedClass}">
                        <div class="achievement-icon">${achievement.icon}</div>
                        <div class="achievement-name">${achievement.name}</div>
                    </div>
                `;
                grid.innerHTML += achievementDiv;
            });
        }

        // ‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡πà‡∏≤‡∏ô
        function openLevel(levelId) {
            const level = levels.find(l => l.id === levelId);
            if (!level) return;

            document.getElementById('modalTitle').textContent = `‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà ${level.id}: ${level.title}`;
            document.getElementById('modalDescription').textContent = level.description;
            document.getElementById('gameModal').classList.add('show');
            
            // ‡πÄ‡∏Å‡πá‡∏ö ID ‡∏î‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            window.currentLevelId = levelId;
        }

        // ‡∏õ‡∏¥‡∏î modal
        function closeModal() {
            document.getElementById('gameModal').classList.remove('show');
        }

        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏î‡πà‡∏≤‡∏ô (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
        function startLevel() {
            const levelId = window.currentLevelId;
            closeModal();
            
            // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°
            setTimeout(() => {
                // ‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
                const score = Math.floor(Math.random() * 40) + 60; // 60-100
                const level = levels.find(l => l.id === levelId);
                
                completeLevel(levelId, score);
                
                alert(`üéâ ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß!\n‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${score}/${level.requiredScore}\n${score >= level.requiredScore ? '‡∏ú‡πà‡∏≤‡∏ô! üéä' : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á üí™'}`);
            }, 2000);
        }

        // ‡∏à‡∏ö‡∏î‡πà‡∏≤‡∏ô
        function completeLevel(levelId, score) {
            const level = levels.find(l => l.id === levelId);
            const passed = score >= level.requiredScore;
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if (!gameData.userProgress[levelId]) {
                gameData.userProgress[levelId] = {};
            }
            
            gameData.userProgress[levelId].score = Math.max(gameData.userProgress[levelId].score || 0, score);
            
            if (passed && !gameData.userProgress[levelId].completed) {
                gameData.userProgress[levelId].completed = true;
                gameData.completedLevels++;
                gameData.totalScore += level.reward;
                
                // ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏î‡πà‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
                if (levelId < levels.length) {
                    levels[levelId].unlocked = true;
                }
                
                // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                checkAchievements();
            }
            
            saveGameData();
            updateUI();
        }

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        function checkAchievements() {
            // ‡∏Å‡πâ‡∏≤‡∏ß‡πÅ‡∏£‡∏Å
            if (gameData.completedLevels >= 1) {
                achievements.find(a => a.id === 'first_level').earned = true;
            }
            
            // ‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢
            if (gameData.completedLevels >= 5) {
                achievements.find(a => a.id === 'level_crusher').earned = true;
            }
        }

        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏Å‡∏° (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
        function resetGame() {
            if (confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                localStorage.removeItem('englishGameData');
                gameData = {
                    currentLevel: 1,
                    totalScore: 0,
                    completedLevels: 0,
                    currentStreak: 5,
                    userProgress: {}
                };
                
                // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å
                levels.forEach((level, index) => {
                    level.unlocked = index === 0;
                });
                
                // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                achievements.forEach(achievement => {
                    achievement.earned = achievement.id === 'streak_master';
                });
                
                updateUI();
            }
        }

        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        document.addEventListener('DOMContentLoaded', function() {
            loadGameData();
        });

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏ã‡πà‡∏≠‡∏ô‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á)
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey && e.shiftKey && e.key === 'R') {
                resetGame();
            }
        });
    </script>
</body>
</html>
